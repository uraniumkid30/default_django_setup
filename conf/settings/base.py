"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import functools
from pathlib import Path
from file_manager.utils import FileProcessingTool

# Build paths inside the project like this: BASE_DIR / 'subdir'.
SETTINGS_DIR = Path(__file__).resolve().parent  # settings dir
PROJECT_DIR = Path(__file__).resolve().parent.parent  # project conf dir
ROOT_DIR = Path(__file__).resolve().parent.parent.parent  # dir housing conf dir

DATABASE_DIR = os.path.join(PROJECT_DIR, "databases")
LOGS_DIR = os.path.join(ROOT_DIR, "logs")
FILES_DIR = os.path.join(ROOT_DIR, "files")
THEME_DIR = os.path.join(ROOT_DIR, "themes")
ARCHIVE_DIR = os.path.join(FILES_DIR, "ARCHIVE")
NEWFILES_DIR = os.path.join(FILES_DIR, "NEW_FILES")
REQUIREMENTS_DIR = os.path.join(ROOT_DIR, "requirements")

directory_list = [
    DATABASE_DIR,
    LOGS_DIR,
    FILES_DIR,
    ARCHIVE_DIR,
    NEWFILES_DIR,
    REQUIREMENTS_DIR,
    os.path.join(THEME_DIR, "templates"),
    os.path.join(THEME_DIR, "static", "css"),
    os.path.join(THEME_DIR, "static", "js"),
    os.path.join(THEME_DIR, "static", "img"),
]

for _dir in directory_list:
    FileProcessingTool.check_and_create_dir(_dir)


INTERNAL_IPS = ("127.0.0.1",)

LOGIN_URL = "/login/"
LOGOUT_URL = "/logout/"

ANONYMOUS_URLS = [
    r"^admin/$",
    r"^admin/login/$",
    r"^media/",
    r"^static/",
]

# Application definition

DEFAULT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
LOCAL_APPS = []

THIRD_PARTY_APPS = [
    "rest_framework",
    # "whitenoise.runserver_nostatic",
]

ALL_APPS_CONTAINER = {
    "DEFAULT_APPS": DEFAULT_APPS,
    "LOCAL_APPS": LOCAL_APPS,
    "THIRD_PARTY_APPS": THIRD_PARTY_APPS,
}

# Application definition
INSTALLED_APPS = functools.reduce(lambda x, y: x + y, ALL_APPS_CONTAINER.values())


ALLOWED_HOSTS = []


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "conf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(THEME_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "conf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
# STATIC_ROOT = "/var/www/static" # is the folder location of static files when collectstatic is run

MEDIA_URL = "media/"
# MEDIA_ROOT = "/var/www/media"

# STATICFILES_DIRS = [
#     os.path.join(THEME_DIR, "static"),
# ] # tells Django where to look for static files in a Django project, such as a top-level static folder

# DJANGO_STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
# WHITENOISE_STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] %(levelname)s %(message)s - %(pathname)s#lines-%(lineno)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "handlers": {
        "default": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "default.log"),
            "formatter": "standard",
            "maxBytes": 104857600,
        },
        "handler_error": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOGS_DIR, "error.log"),
        },
        "daily_error": {
            "level": "ERROR",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "daily_error.log"),
            "when": "midnight",
            "backupCount": 7,
            "formatter": "standard",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["handler_error", "daily_error"],
            "level": "ERROR",
            "propagate": True,
        },
        "": {
            "handlers": ["default", "daily_error"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
